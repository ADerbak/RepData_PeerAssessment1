install.packages(swirl)
install.packages(installr); library(installr)
install.packages("installr"); library(installr)
updateR()
a <- available.packages()
mapply(rep, 1:4, 4:1)
log(-1)
?seed
?seed()
mean(x)
traceback()
source('~/.active-rstudio-document', echo=TRUE)
data(iris)
?iris
sapply(iris,mean)
sapply(iris$Sepal.Length,mean)
species <- split(iris,iris$Species)
?tapply
tapply(iris$Sepal.Length, species, mean)
apply(iris$Sepal.Length, species, mean)
apply(iris, species, mean)
tapply(iris, species, mean)
tapply(species, iris,mean)
species
mean(species$virginica$Sepal.Length)
apply(iris, 1,mean)
rowMeans(iris[, 1:4])
names(iris)
apply(iris[, 1:4],2,mean)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg,mtcars$cyl), mean)
with(mtcars,tapply(mpg,cyl,mean))
sapply(mtcars, cyl, mean, simplify = FALSE)
sapply(mtcars, cyl, mean, simplify = TRUE)
sapply(split(mtcars$mpg,mtcars$cyl), mean, simplify = FALSE)
x <- sapply(split(mtcars$mpg,mtcars$cyl), mean, simplify = FALSE)
x$`4`-x$8
x$`4`- x$`8``
x$`4`- x$`8`
debug(ls)
ls
ls
x <- sapply(split(mtcars$hp,mtcars$cyl), mean, simplify = FALSE)
x
x$`4` - x$`8`
set
Q
Q
quit()
library(datasets)
library(swirl)
swirl()
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject ==1)
sub1
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub[,-c(562,563)]))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon))
mdist <- dist(c(sub1[,10:12], maxCon))
s
mdist <- dist(c(sub1[,10:12], sub1[maxCon]))
mdist <- dist(sub1[maxCon]))
mdist <- dist(sub1[maxCon])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-562:563], centers = 6)
kClust <- kmeans(sub1[,562:563], centers = 6)
kClust <- kmeans(sub1$[,-562:563], centers = 6)
kClust <- kmeans(sub1[,-562:563], centers = 6)
kClust <- kmeans(sub1[,1:561], centers = 6)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1$[,-562:563], centers = 6, nstart = 100)
kClust <- kmeans(sub1$[,-c(562,563)], centers = 6, nstart = 100)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][[wcol]])
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1<0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0,cnt0$county.site), nrow)
sapply(split(cnt1,cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.code == 63 & Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0,x0sub, pch = 20)
abline(h=median(x0sub,na.rm = TRUE), lwd = 2,)
plot(dates1,x1sub, pch = 20)
abline(h=median(x1sub,na.rm = TRUE), lwd = 2,)
rng <- range(x0sub,x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean = mn0)
d1 <- data.frame(state=names(mn1), mean = mn1)
mrg <- merge(d0,d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, plot(rep(2,52), mrg[,3] ))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x<mr$mean.y,]
mrg[mrg$mean.x<mrg$mean.y,]
library("swirl")
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
lhs-rhs
all.equal(lhs, rhs)
varchild <- var(galton$child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- est(ols.slope,ols.ic)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,sum(varRes,varEst))
all.equal(varChild,sum(varRes+varEst))
all.equal(varChild,varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(child~parent, galton)
l_nor <- lm(gch_nor ~ gpa_nor)
list(rm=ls())
rm(list=ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
summary(fit)
data("mtcars")
fit2 <- lm(mpg~weight, mtcars)
fit2 <- lm(mpg~wt, mtcars)
summary(fit2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit <- lm(y~x)
summary(fit)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
summary(lm(x~x))
x <- c(0.18, -1.54, 0.42, 0.95)
sum(w*((x-mean(x))^2))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x~y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum((x-mean(x)^2)
)
sqrt(sum((x-mean(x)^2)))
sum((x-mean(x)^2))/sqrt(sd(x))
(x-mean(x)^2)/sqrt(sd(x))
(x-mean(x)^2)/sqrt(sd(x))[1]
((x-mean(x)^2)/sqrt(sd(x)))[1]
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
((x-mean(x)^2)/sqrt(sd(x)))[1]
((x-mean(x)^2)/sd(x))[1]
((x-mean(x))/sd(x))[1]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
summary(lm(y~x))
data(diamonds)
data(diamond)
library("data")
data(diamond)
library(diamond)
demo()
require(ggplot2)
library("UsingR")
install.packages("UsingR")
install.packages("UsingR");data("diamonds")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
load(mtcars)
load('mtcars')
library('mtcars')
data('mtcars')
fit <- lm(mpg~weight)
fit <- lm(mpg~wt)
fit <- lm(mpg ~ wt, data = mtcars)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1,1) * qt(.975, df = fit$df) * sumCoef[1,2]
sumCoef[1,1] + c(1) * qt(.95, df = fit$df) * sumCoef[1,2]
sumCoef[1,1] + c(-1) * qt(.95, df = fit$df) * sumCoef[1,2]
sumCoef[1,1] + c(-1) * qt(.975, df = fit$df) * sumCoef[1,2]
summary(sumCoef)
sumCoef
sumCoef[2,1] + c(-1,1) * qt(.975, df = fit$df) * sumCoef[2,2]
args(predict)
?predict
predict(fit, mpg$wt = 3000)
predict(fit, 3000, interval = ("wt"))
predict(fit, 3000)
predict(fit, wt= 3000)
sumCoef[2,1]*3000 + sumCoef[1,1]
sumCoef[2,1]*3000 + c(-1,1) * qt(.975, df = fit$df) * sumCoef[2,2]
sumCoef[2,1]*3 + c(-1,1) * qt(.975, df = fit$df) * sumCoef[2,2]
sumCoef[1,1]*3 + c(-1,1) * qt(.975, df = fit$df) * sumCoef[1,2]
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y ~ x))$sigma
setwd("C:/Users/Rebecca/RepData_PeerAssessment1")
read.csv("activity.csv")
file <- read.csv("activity.csv")
mean(file$steps, na.rm = TRUE)
hist(file$steps)
hist(file$steps, breaks = 25)
hist(file$steps, breaks = 100)
hist(file$steps, breaks = 50)
hist(file$steps, breaks = 50, xlab = 'Steps')
hist(file$steps, breaks = 50, xlab = 'Steps', main = 'Histogram of Total Steps')
median(file$steps, na.rm = TRUE)
median(file$steps)
mean(file$steps, na.rm = TRUE)
median(file$steps, na.rm = TRUE)
hist(file$steps, breaks = 50, xlab = 'Steps', main = 'Histogram of Total Steps')
head(file)
str(file)
xyplot(interval ~ date,
data = file,
type = "l",
lty = c(1, 2, 2, 1),
lwd = c(1, 1, 1, 3),
col.line = c(rep("black",3), "red"))
library(lattice)
xyplot(interval ~ date,
data = file,
type = "l",
lty = c(1, 2, 2, 1),
lwd = c(1, 1, 1, 3),
col.line = c(rep("black",3), "red"))
args(spread)
library(tidyr)
args(gather)
gather(file, key = 'date', value = 'steps', na.rm = TRUE)
gather(file, key = 'date', value = 'steps', na.rm = TRUE)
sum(file$steps~file$date)
gather(file, key = 'steps', value = 'date', na.rm = TRUE)
tapply(file$steps, file$day, sum, na.rm = TRUE)
vapply(file$steps, file$day, sum, na.rm = TRUE)
tapply(file$steps, file$day, sum, na.rm = TRUE)
totalsteps <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE)
totalsteps <- aggregate(steps ~ date, data = file, sum, na.rm = TRUE)
mean(totalsteps)
mean(totalsteps$steps)
median(totalsteps$steps)
hist(totalsteps$steps, breaks = 50, xlab = 'Steps', main = 'Histogram of Total Steps by day')
hist(totalsteps$steps, col = "green", xlab = 'Steps', main = 'Histogram of Total Steps by day')
time_series <- tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
time_series <- tapply(file$steps, file$interval, mean, na.rm = TRUE)
plot(data = time_series, row.names(time_series), type = "l",xlab = "5 min interval", ylab = "Avg across Days", main = "Average number of steps taken by Day", col = "blue")
plot(row.names(time_series),data = time_series, type = "l",xlab = "5 min interval", ylab = "Avg across Days", main = "Average number of steps taken by Day", col = "blue")
time_series <- tapply(file$steps, file$interval, mean, na.rm = TRUE)
plot(row.names(time_series),data = time_series, type = "l",xlab = "5 min interval", ylab = "Avg across Days", main = "Average number of steps taken by Day", col = "blue")
plot(row.names(time_series),time_series, type = "l",xlab = "5 min interval", ylab = "Avg across Days", main = "Average number of steps taken by Day", col = "blue")
max(time_series)
which.max(time_series)
which.max(time_series)[1]
which.max(time_series)[[1]]
which.max(time_series)[[2]]
which.max(time_series)[[1,]]
which.max(time_series)[[1]]
which.max(time_series)
max <- which.max(time_series)
names(max)
!complete.cases(file)
!complete.cases(file))
sum(!complete.cases(file))
totalsteps <- aggregate(steps ~ date, data = file, sum, na.rm = TRUE)
sum(totalsteps$steps)
hist(totalsteps$steps, col = "green", xlab = 'Steps', main = 'Histogram of Total Steps by day')
StepsAverage <- aggregate(steps ~ interval, data = file, FUN = mean)
fillNA <- numeric()
for (i in 1:nrow(file)) {
obs <- file[i, ]
if (is.na(obs$steps)) {
steps <- subset(StepsAverage, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
newdata <- file
newdata$steps <- fillNA
str(newdata)
summary(newdata)
newtotalsteps <- aggregate(steps ~ date, data = file, sum, na.rm = TRUE)
hist(newtotalsteps$steps, col = "blue", xlab = 'Steps', main = 'New Histogram of Total Steps by day')
mean(newtotalsteps$steps)
median(newtotalsteps$steps)
day <- weekdays(file$date)
day <- weekdays(as.Date(file$date))
for (i in 1:nrow(file)) {
if (day[i] == "Saturday") {
daylevel[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daylevel[i] <- "Weekend"
} else {
daylevel[i] <- "Weekday"
}
}
daytype[i] <- "Weekday"
for (i in 1:nrow(file)) {
if (day[i] == "Saturday") {
daytype[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daytype[i] <- "Weekend"
} else {
daytype[i] <- "Weekday"
}
}
daytype <- vector()
for (i in 1:nrow(file)) {
if (day[i] == "Saturday") {
daytype[i] <- "Weekend"
} else if (day[i] == "Sunday") {
daytype[i] <- "Weekend"
} else {
daytype[i] <- "Weekday"
}
}
file$daytype <- daytype
file$daytype <- as.factor(file$daytype)
stepsByDay <- aggregate(steps ~ interval + daytype, data = file, mean)
names(stepsByDay) <- c("interval", "daytype", "steps")
xyplot(steps ~ interval | daytype, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
file$daytype <- daytype
StepsByDay <- aggregate(steps ~ interval + daytype, data = file, mean)
names(stepsByDay) <- c("interval", "daytype", "steps")
xyplot(steps ~ interval | daytype, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
names(stepsByDay) <- c("interval", "daytype", "steps")
head(stepsByDay)
library("knitr")
knit2html("file")
rmarkdown::render('file.rmd', output_format = 'html_document')
rmarkdown::render('PA1_template.Rmd', output_format = 'html_document')
rmarkdown::render('PA1_template.Rmd', output_format = 'html_document')
knitr::opts_chunk$set(echo = FALSE
hist(totalsteps$steps, col = "green", xlab = 'Steps', main = 'Histogram of Total Steps by day')
opts_chunk$set(echo = TRUE)
rmarkdown::render('PA1_template.Rmd', output_format = 'html_document')
StepsByDay <- aggregate(steps ~ interval + daytype, data = file, mean)
StepsByDay <- aggregate(steps ~ interval + daytype, data = file, mean)
names(stepsByDay) <- c("interval", "daytype", "steps")
head(stepsByDay)
stepsByDay <- aggregate(steps ~ interval + daytype, data = file, mean)
library(lattice)
